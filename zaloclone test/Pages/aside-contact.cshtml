@page
@model Server.Pages.aside_contactModel
@{
    Layout = "_LayoutContact";
}

<aside class="flex-column aside-container-msg">
    <header class="flex-align-center aside-contact-head">
        <img class="aside-contact-head-img" src="https://cdn-icons-png.flaticon.com/512/77/77543.png" alt="">
        <div class="aside-contact-name">Danh sách bạn bè</div>
    </header>

    <div class="contact">
        <div class="flex-align-center contact-list-title">
            <span>Bạn bè</span>
            <span>&nbsp;@(Model.Friends?.Count ?? 0)</span>
        </div>

        <div class="cont-contact">
            <div class="contact-filter">
                <div class="flex-justify-center search contact-search">
                    <button class="flex-align-center search-icon">
                        <i class="fa-solid fa-magnifying-glass"></i>
                    </button>
                    <input class="search-input" type="text" placeholder="Tìm bạn" id="searchInput">
                    <button class="flex-align-center clear-icon" id="clearSearch">
                        <i class="fa-solid fa-circle-xmark"></i>
                    </button>
                </div>
                <div class="flex-align-center wrapper-filter">
                    <select id="sortOrder" class="contact-filter-select">
                        <option value="name_asc">Tên (A-Z)</option>
                        <option value="name_desc">Tên (Z-A)</option>
                        <option value="date_asc">Cũ nhất</option>
                        <option value="date_desc">Mới nhất</option>
                    </select>
                    <select id="filterType" class="contact-filter-select">
                        <option value="all">Tất Cả</option>
                        <option value="online">Đang hoạt động</option>
                        <option value="blocked">Đã chặn</option>
                    </select>
                </div>
            </div>

            <div id="friendsList">
                @if (Model.Friends != null)
                {
                    foreach (var friend in Model.Friends)
                    {
                        <div class="flex-align-center contact-item" data-friend-id="@friend.UserId">
                            <img class="avatar-img friend-avatar" src="@(string.IsNullOrEmpty(friend.Avatar) ? "/img/default-avatar.png" : friend.Avatar)" alt="">
                            <div class="flex-align-center-between friend-info">
                                <span class="friend-name">@friend.Username</span>
                                @if (friend.IsOnline)
                                {
                                    <span class="friend-status online">Online</span>
                                }
                                <button type="button" class="btn-search-add friend-more" onclick="openFriendOptions(this)">
                                    <i class="fa-solid fa-ellipsis friend-more-icon"></i>
                                </button>
                                <div class="friend-options" style="display: none;">
                                    <ul>
                                        <li onclick="viewFriendProfile('@friend.UserId')">Xem thông tin</li>
                                        <li onclick="blockFriend('@friend.UserId')">Chặn</li>
                                        <li onclick="deleteFriend('@friend.UserId')" class="danger">Xóa bạn</li>
                                    </ul>
                                </div>
                            </div>
                        </div>
                    }
                }
            </div>
        </div>
    </div>
</aside>

<!-- Friend Profile Modal -->
<div id="friendProfileModal" class="modal" style="display: none;">
    <div class="modal-content">
        <span class="close" onclick="closeProfileModal()">&times;</span>
        <div id="profileContent"></div>
    </div>
</div>

<!-- Block Friend Modal -->
<div id="blockFriendModal" class="modal" style="display: none;">
    <div class="modal-content">
        <span class="close" onclick="closeBlockModal()">&times;</span>
        <h2>Chặn người dùng</h2>
        <div class="block-form">
            <textarea id="blockReason" placeholder="Nhập lý do chặn..."></textarea>
            <div class="modal-buttons">
                <button onclick="closeBlockModal()">Hủy</button>
                <button onclick="confirmBlock()" class="danger">Chặn</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        let currentFriendId = null;

        // Filter friends
        function filterFriends() {
            const searchTerm = document.getElementById('searchInput').value;
            const sortOrder = document.getElementById('sortOrder').value;
            const filterType = document.getElementById('filterType').value;

            const filter = {
                searchTerm: searchTerm,
                sortOrder: sortOrder,
                filterType: filterType
            };

            fetch('?handler=Filter', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                },
                body: JSON.stringify(filter)
            })
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Network response was not ok');
                    }
                    return response.json();
                })
                .then(result => {
                    if (result.success) {
                        updateFriendsList(result.data);
                    } else {
                        showToast(result.message || 'Có lỗi xảy ra khi lọc danh sách bạn bè');
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    showToast('Có lỗi xảy ra khi lọc danh sách bạn bè');
                });
        }


        // View friend profile
        function viewFriendProfile(friendId) {
            fetch(`?handler=FriendProfile&friendId=${friendId}`)
                .then(response => response.json())
                .then(result => {
                    if (result.success) {
                        displayProfile(result.data);
                    }
                });
        }

        // Block friend
        function blockFriend(friendId) {
            currentFriendId = friendId;
            document.getElementById('blockFriendModal').style.display = 'block';
        }

        function confirmBlock() {
            const reason = document.getElementById('blockReason').value;

            const blockModel = {
                userId: currentFriendId,
                reason: reason
            };

            fetch('?handler=BlockFriend', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                },
                body: JSON.stringify(blockModel)
            })
                .then(response => response.json())
                .then(result => {
                    if (result.success) {
                        closeBlockModal();
                        filterFriends(); // Refresh the list
                    }
                    showToast(result.message);
                });
        }

        // Delete friend
        function deleteFriend(friendId) {
            if (confirm('Bạn có chắc chắn muốn xóa bạn bè không?')) {
                fetch('?handler=DeleteFriend', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                    },
                    body: JSON.stringify({ friendId: friendId })
                })
                    .then(response => {
                        if (!response.ok) {
                            throw new Error('Network response was not ok');
                        }
                        return response.json();
                    })
                    .then(result => {
                        if (result.success) {
                            filterFriends(); // Refresh the list
                        }
                        showToast(result.message);
                    })
                    .catch(error => {
                        console.error('Error:', error);
                        showToast('Có lỗi xảy ra khi xóa bạn bè');
                    });
            }
        }

        // Helper functions
        function updateFriendsList(friends) {
            if (!Array.isArray(friends)) {
                console.error('Expected friends to be an array, got:', friends);
                return;
            }

            const container = document.getElementById('friendsList');
            container.innerHTML = ''; // Clear current list

            friends.forEach(friend => {
                try {
                    const friendElement = createFriendElement(friend);
                    container.appendChild(friendElement);
                } catch (error) {
                    console.error('Error creating friend element:', error);
                }
            });
        }

        function displayProfile(profile) {
            const content = document.getElementById('profileContent');
            // Create and populate profile content
            content.innerHTML = `
                        <div class="profile-header">
                            <img src="${profile.avatar || '/img/default-avatar.png'}" alt="${profile.username}">
                            <h2>${profile.username}</h2>
                            ${profile.isVerified ? '<span class="verified-badge">✓</span>' : ''}
                        </div>
                        <div class="profile-info">
                            <p><strong>Bio:</strong> ${profile.bio || 'Không có'}</p>
                            <p><strong>Email:</strong> ${profile.email}</p>
                            <p><strong>Số điện thoại:</strong> ${profile.phone}</p>
                            <p><strong>Ngày sinh:</strong> ${new Date(profile.dob).toLocaleDateString()}</p>
                            <p><strong>Bạn bè từ:</strong> ${new Date(profile.friendsSince).toLocaleDateString()}</p>
                            <p><strong>Bạn chung:</strong> ${profile.mutualFriends}</p>
                        </div>
                    `;
            document.getElementById('friendProfileModal').style.display = 'block';
        }

        // Event listeners
        document.getElementById('searchInput').addEventListener('input', filterFriends);
        document.getElementById('sortOrder').addEventListener('change', filterFriends);
        document.getElementById('filterType').addEventListener('change', filterFriends);
        document.getElementById('clearSearch').addEventListener('click', () => {
            document.getElementById('searchInput').value = '';
            filterFriends();
        });

        // Modal functions
        function closeProfileModal() {
            document.getElementById('friendProfileModal').style.display = 'none';
        }

        function closeBlockModal() {
            document.getElementById('blockFriendModal').style.display = 'none';
            document.getElementById('blockReason').value = '';
            currentFriendId = null;
        }

        function showToast(message) {
            const toast = document.createElement('div');
            toast.className = 'toast-notification';
            toast.textContent = message;
            document.body.appendChild(toast);

            setTimeout(() => {
                toast.classList.add('show');
                setTimeout(() => {
                    toast.classList.remove('show');
                    setTimeout(() => {
                        document.body.removeChild(toast);
                    }, 300);
                }, 3000);
            }, 100);
        }
    </script>
}
