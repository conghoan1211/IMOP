@page
@model Server.Pages.aside_contactModel
@{
    Layout = "_LayoutContact";
}

<aside class="flex-column aside-container-msg">
    <header class="flex-align-center aside-contact-head">
        <img class="aside-contact-head-img" src="https://cdn-icons-png.flaticon.com/512/77/77543.png" alt="">
        <div class="aside-contact-name">Danh sách bạn bè</div>
    </header>

    <div class="contact">
        <div class="flex-align-center contact-list-title">
            <span>Bạn bè</span>
            <span>&nbsp;(@(Model.Friends?.Count ?? 0))</span>
        </div>

        <div class="cont-contact">
            <div class="contact-filter">
                <div class="flex-justify-center search contact-search">
                    <button class="flex-align-center search-icon">
                        <i class="fa-solid fa-magnifying-glass"></i>
                    </button>
                    <input class="search-input" type="text" placeholder="Tìm bạn" id="searchInput">
                    <button class="flex-align-center clear-icon" id="clearSearch">
                        <i class="fa-solid fa-circle-xmark"></i>
                    </button>
                </div>
                <div class="flex-align-center wrapper-filter">
                    <select id="sortOrder" class="contact-filter-select">
                        <option value="name_asc">Tên (A-Z)</option>
                        <option value="name_desc">Tên (Z-A)</option>
                        <option value="date_asc">Cũ nhất</option>
                        <option value="date_desc">Mới nhất</option>
                    </select>
                    <select id="filterType" class="contact-filter-select">
                        <option value="all">Tất Cả</option>
                        <option value="online">Đang hoạt động</option>
                        <option value="blocked">Đã chặn</option>
                    </select>
                </div>
            </div>

            <div id="friendsList">
                @if (Model.Friends != null)
                {
                    foreach (var friend in Model.Friends)
                    {
                        <div class="flex-align-center contact-item" data-friend-id="@friend.UserId">
                            <div style="position: relative;">
                                @{
                                    string? avatar = friend.Avatar;
                                    if (string.IsNullOrEmpty(avatar)) avatar = "default-avatar.png";
                                }
                                <img class="avatar-img friend-avatar" src="/img/@avatar" alt="">
                                @if (friend.IsOnline)
                                {
                                    <div class="friend-online"><i class="fa-solid fa-circle"></i></div>
                                }
                            </div>
                            <img class="avatar-img friend-avatar" src="/img/@(string.IsNullOrEmpty(friend.Avatar) ? "/img/default-avatar.png" : friend.Avatar)" alt="">
                            <div class="flex-align-center-between friend-info">
                                <span class="friend-name">@friend.Username</span>
                                @if (friend.IsOnline)
                                {
                                    <span class="friend-status online">Online</span>
                                }
                                <button type="button" class="btn-search-add friend-more" onclick="openFriendOptions(this)">
                                    <i class="fa-solid fa-ellipsis friend-more-icon"></i>
                                </button>
                                <div class="friend-options" style="display: none;">
                                    <ul>
                                        @if (friend.IsBlocked)
                                        {
                                            <li onclick="unblockFriend('@friend.UserId')">Bỏ chặn</li>
                                        }
                                        else
                                        {
                                            <li onclick="blockFriend('@friend.UserId')">Chặn</li>
                                        }
                                        <li onclick="deleteFriend('@friend.UserId')" class="danger">Xóa bạn</li>
                                    </ul>
                                </div>
                            </div>
                        </div>
                    }
                }
            </div>
        </div>
    </div>
</aside>

@section Scripts {
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script>
        // Filter friends
        function filterFriends() {
            const searchTerm = $('#searchInput').val();
            const sortOrder = $('#sortOrder').val();
            const filterType = $('#filterType').val();

            const filter = {
                searchTerm: searchTerm,
                sortOrder: sortOrder,
                filterType: filterType
            };

            $.ajax({
                url: '?handler=Filter',
                type: 'POST',
                contentType: 'application/json',
                data: JSON.stringify(filter),
                headers: {
                    'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
                },
                success: function(result) {
                    if (result.success) {
                        updateFriendsList(result.data);
                    } else {
                        showToast(result.message || 'Có lỗi xảy ra khi lọc danh sách bạn bè');
                    }
                },
                error: function(xhr, status, error) {
                    console.error('Error:', error);
                    showToast('Có lỗi xảy ra khi lọc danh sách bạn bè');
                }
            });
        }

        // Block friend
        function blockFriend(friendId) {
            if (confirm('Bạn có chắc chắn muốn chặn người dùng này không?')) {
                $.ajax({
                    url: '?handler=BlockFriend',
                    type: 'POST',
                    contentType: 'application/json',
                    data: JSON.stringify({ userId: friendId }),
                    headers: {
                        'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
                    },
                    success: function(result) {
                        if (result.success) {
                            filterFriends();
                        }
                        showToast(result.message);
                    }
                });
            }
        }

        // Unblock friend
        function unblockFriend(friendId) {
            if (confirm('Bạn có chắc chắn muốn bỏ chặn người dùng này không?')) {
                $.ajax({
                    url: '?handler=UnblockFriend',
                    type: 'POST',
                    contentType: 'application/json',
                    data: JSON.stringify({ userId: friendId }),
                    headers: {
                        'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
                    },
                    success: function(result) {
                        if (result.success) {
                            filterFriends();
                        }
                        showToast(result.message);
                    }
                });
            }
        }

        // Delete friend
        function deleteFriend(friendId) {
            if (confirm('Bạn có chắc chắn muốn xóa bạn bè không?')) {
                $.ajax({
                    url: '?handler=DeleteFriend',
                    type: 'POST',
                    contentType: 'application/json',
                    data: JSON.stringify({ friendId: friendId }),
                    headers: {
                        'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
                    },
                    success: function(result) {
                        if (result.success) {
                            filterFriends();
                        }
                        showToast(result.message);
                    },
                    error: function(xhr, status, error) {
                        console.error('Error:', error);
                        showToast('Có lỗi xảy ra khi xóa bạn bè');
                    }
                });
            }
        }

        // Helper functions
        function updateFriendsList(friends) {
            if (!Array.isArray(friends)) {
                console.error('Expected friends to be an array, got:', friends);
                return;
            }

            const container = document.getElementById('friendsList');
            container.innerHTML = '';

            friends.forEach(friend => {
                try {
                    const friendElement = createFriendElement(friend);
                    container.appendChild(friendElement);
                } catch (error) {
                    console.error('Error creating friend element:', error);
                }
            });
        }

        function createFriendElement(friend) {
            const div = document.createElement('div');
            div.className = 'flex-align-center contact-item';
            div.setAttribute('data-friend-id', friend.userId);

            const avatar = friend.avatar || '/img/default-avatar.png';

            div.innerHTML = `
                                <img class="avatar-img friend-avatar" src="${avatar}" alt="">
                                <div class="flex-align-center-between friend-info">
                                    <span class="friend-name">${friend.username}</span>
                                    ${friend.isOnline ? '<span class="friend-status online">Online</span>' : ''}
                                    <button type="button" class="btn-search-add friend-more" onclick="openFriendOptions(this)">
                                        <i class="fa-solid fa-ellipsis friend-more-icon"></i>
                                    </button>
                                    <div class="friend-options" style="display: none;">
                                        <ul>
                                            ${friend.isBlocked ?
                    '<li onclick="unblockFriend(\'' + friend.userId + '\')">Bỏ chặn</li>' :
                    '<li onclick="blockFriend(\'' + friend.userId + '\')">Chặn</li>'
                }
                                            <li onclick="deleteFriend('${friend.userId}')" class="danger">Xóa bạn</li>
                                        </ul>
                                    </div>
                                </div>
                            `;

            return div;
        }

        function openFriendOptions(button) {
            document.querySelectorAll('.friend-options').forEach(menu => {
                if (menu !== button.nextElementSibling) {
                    menu.style.display = 'none';
                }
            });

            const optionsMenu = button.nextElementSibling;
            optionsMenu.style.display = optionsMenu.style.display === 'none' ? 'block' : 'none';
        }

        document.addEventListener('click', function (event) {
            if (!event.target.closest('.friend-more')) {
                document.querySelectorAll('.friend-options').forEach(menu => {
                    menu.style.display = 'none';
                });
            }
        });

        function showToast(message) {
            const toast = document.createElement('div');
            toast.className = 'toast-notification';
            toast.textContent = message;
            document.body.appendChild(toast);

            setTimeout(() => {
                toast.classList.add('show');
                setTimeout(() => {
                    toast.classList.remove('show');
                    setTimeout(() => {
                        document.body.removeChild(toast);
                    }, 300);
                }, 3000);
            }, 100);
        }

        const debouncedFilter = debounce(() => filterFriends(), 300);
        $('#searchInput').on('input', debouncedFilter);
        $('#sortOrder').on('change', filterFriends);
        $('#filterType').on('change', filterFriends);
        $('#clearSearch').on('click', function() {
            $('#searchInput').val('');
            filterFriends();
        });

        function debounce(func, wait) {
            let timeout;
            return function executedFunction(...args) {
                const later = () => {
                    clearTimeout(timeout);
                    func(...args);
                };
                clearTimeout(timeout);
                timeout = setTimeout(later, wait);
            };
        }

        $(document).ready(function() {
            filterFriends();
        });
    </script>
}
